/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/iplb/helps.ycp
 * Package:	Configuration of iplb
 * Summary:	Help texts of all the dialogs
 * Authors:	Cong Meng <cmeng@novell.com>
 *
 * $Id: helps.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "iplb";

/**
 * All helps are here
 */
map HELPS = $[
	"global_conf" : _("
<p><b><big>check interval</big> =</b> <i>n</i>
</p><p>Defines the number of second between server checks.
</p><p>Default: 10 seconds

</p><p><b><big>check timeout</big> =</b> <i>n</i>
</p><p>Timeout in seconds for connect, external and ping checks. If the timeout is exceeded then the real server is declared dead.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>If undefined then the value of negotiatetimeout is used. negotiatetimeout is also a global value that may be overriden by a per-virtual setting.
</p><p>If both checktimeout and negotiatetimeout are unset, the default is used.
</p><p>Default: 5 seconds

</p><p><b><big>failure count</big> =</b> <i>n</i>
</p><p>The number of consecutive times a failure will have to be reported by a check before the realserver is considered to have failed.  A value of 1 will have the realserver considered failed on the first failure.  A successful check will reset the failure counter to 0.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: 1

</p><p><b><big>negotiate timeout</big> =</b> <i>n</i>
</p><p>Timeout in seconds for negotiate checks.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>If undefined then the value of connecttimeout is used. connecttimeout is also a global value that may be overriden by a per-virtual setting.
</p><p>If both negotiatetimeout and connecttimeout are unset, the default is used.
</p><p>Default: 30 seconds

</p><p><b><big>fallback</big> =</b> <i>ip_address|hostname[:portnumber|sercvicename]</i> [<b>gate</b>|<b>masq</b>|<b>ipip</b>]
</p><p>the server onto which a webservice is redirected if all real servers are down. Typically this would be 127.0.0.1 with an emergency page.
</p><p>If defined in a virtual server section then the global value is overridden.

</p><p><b><big>log file</big> = \"</b><i>/path/to/logfile</i><b>\"</b>|syslog_facility
</p><p>An alternative logfile might be specified with this directive. If the logfile does not have a leading '/', it is assumed to be a <b><a href=\"/man/3/syslog\">syslog</a></b>(3) facility name.
</p><p>Default: log directly to the file <i>/var/log/ldirectord.log</i>.

</p><p><b><big>email alert</big> = \"</b><i>emailaddress</i><b>\"</b>
</p><p>A valid email address for sending alerts about the changed connection status to any real server defined in the virtual service. This option requires perl
module MailTools to be installed. Automatically tries to send email using any of the built-in methods. See perldoc Mail::Mailer for more info on methods.
</p><p>If defined in a virtual server section then the global value is overridden.

</p><p><b><big>email alert freq</big> =</b> <i>n</i>
</p><p>Delay in seconds between repeating email alerts while any given real server in the virtual service remains inaccessible. A setting of zero seconds will
inhibit the repeating alerts. The email timing accuracy of this setting is dependent on the number of seconds defined in the checkinterval configuration
option.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: 0

</p><p><b><big>email alert status</big> = all</b>|<b>none</b>|<b>starting</b>|<b>running</b>|<b>stopping</b>|<b>reloading</b>,...
</p><p>Comma delimited list of server states in which email alerts should be sent. <b>all</b> is a short-hand for
\"<b>starting</b>,<b>running</b>,<b>stopping</b>,<b>reloading</b>\". If <b>none</b> is specified, no other option may be specified, otherwise options are ored
with each other.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: all

</p><p><b><big>callback</big> = \"</b><i>/path/to/callback</i><b>\"</b>
</p><p>If this directive is defined, <b>ldirectord</b> automatically calls the executable <i>/path/to/callback</i> after the configuration file has changed on
disk. This is useful to update the configuration file through <b>scp</b> on the other heartbeated host. The first argument to the callback is the name of the
configuration.
</p><p>This directive might also be used to restart <b>ldirectord</b> automatically after the configuration file changed on disk. However, if <b>autoreload</b> is
set to yes, the configuration is reloaded anyway.

</p><p><b><big>execute</big> = \"</b><i>configuration</i><b>\"</b>
</p><p>Use this directive to start an instance of ldirectord for the named <i>configuration</i>.

</p><p><b><big>auto reload</big> = yes</b>|<b>no</b>
</p><p>Defines if &lt;ldirectord&gt; should continuously check the configuration file for modification. If this is set to 'yes' and the configuration file changed
on disk and its modification time (mtime) is newer than the previous version, the configuration is automatically reloaded.
</p><p>Default: no

</p><p><b><big>quiescent</big> = yes</b>|<b>no</b>
</p><p>If <i>yes</i>, then when real or failback servers are determined to be down, they are not actually removed from the kernel's <small>LVS</small> table.
Rather, their weight is set to zero which means that no new connections will be accepted.
</p><p>This has the side effect, that if the real server has persistent connections, new connections from any existing clients will continue to be routed to the
real server, until the persistant timeout can expire. See ipvsadm for more information on persistant connections.
</p><p>This side-effect can be avoided by running the following:
</p><p>echo 1 &gt; /proc/sys/net/ipv4/vs/expire_quiescent_template
</p><p>If the proc file isn't present this probably means that the kernel doesn't have lvs support, <small>LVS</small> support isn't loaded, or the kernel is too
old to have the proc file. Running ipvsadm as root should load <small>LVS</small> into the kernel if it is possible.
</p><p>If <i>no</i>, then the real or failback servers will be removed from the kernel's <small>LVS</small> table. The default is <i>yes</i>.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: <i>yes</i>

</p><p><b><big>fork</big> = yes</b>|<b>no</b>
</p><p>If <i>yes</i>, then ldirectord will spawn a child proccess for every virtual server, and run checks against the real servers from them. This will increase
response times to changes in real server status in configurations with many virtual servers. This may also use less memory then running many seperate instances
of ldirectord. Child processes will be automaticly restarted if they die.
</p><p>Default: <i>no</i>

</p><p><b><big>supervised</big> = yes</b>|<b>no</b>
</p><p>If <i>yes</i>, then ldirectord does not go into background mode. All log-messages are redirected to stdout instead of a logfile. This is useful to run
<b>ldirectord</b> supervised from daemontools. See <a href=\"http://untroubled.org/rpms/daemontools/\">http://untroubled.org/rpms/daemontools/</a> or <a href=\"http://cr.yp.to/daemontools.html\">http://cr.yp.to/daemontools.html</a> for details.
</p><p>Default: <i>no</i>
</p>
"),





	"vserver_conf" : _("
<p><b><big>virtual server</big> =</b> <i>(ip_address|hostname:portnumber|servicename)|firewall-mark</i>
</p><p>Defines a virtual service by IP-address (or hostname) and port (or servicename) or firewall-mark. A firewall-mark is an integer greater than zero. The
configuration of marking packets is controled using the <tt>\"-m\"</tt> option to <b>ipchains</b>(8). All real services and flags for a virtual service
must follow this line immediately and be indented.


</p><p><b><big>real servers</big> =</b> <i>ip_address|hostname[-&gt;ip_address|hostname][:portnumber|servicename</i>]
<b>gate</b>|<b>masq</b>|<b>ipip</b> [<i>weight</i>] [<b>\"</b><i>request</i><b>\", \"</b><i>receive</i><b>\"</b>]
</p><p>Defines a real service by IP-address (or hostname) and port (or servicename). If the port is omitted then a 0 will be used, this is intended primarily for
fwmark services where the port for real servers is ignored. Optionally a range of <small>IP</small> addresses (or two hostnames) may be given, in which case
each <small>IP</small> address in the range will be treated as a real server using the given port. The second argument defines the forwarding method, must be
<b>gate</b>, <b>ipip</b> or <b>masq</b>. The thrid argument is optional and defines the weight for that real server. If omitted then a weight of 1 will be
used. The last two arguments are also optional. They define a request-receive pair to be used to check if a server is alive. They override the request-receive
pair in the virtual server section. These two strings must be quoted. If the request string starts with http://... the IP-address and port of the real
server is overridden, otherwise the IP-address and port of the real server is used.
</p><p>For <small>TCP</small> and <small>UDP</small> (non fwmark) virtual services, unless the forwarding method is masq and the <small>IP</small> address of a
real server is non-local (not present on a interface on the host running ldirectord) then the port of the real server will be set to that of its virtual
service. That is, port-mapping is only available to if the real server is another machine and the forwarding method is masq. This is due to the way that the
underlying <small>LVS</small> code in the kernel functions.
</p><p>More than one of these entries may be inside a virtual section. The checktimeout, negotiatetimeout, failurecount, fallback, emailalert, emailalertfreq and
quiescent options listed above may also appear inside a virtual section, in which case the global setting is overridden.


</p><p><b><big>check type</big> = connect</b>|<b>external</b>|<b>negotiate</b>|<b>off</b>|<b>on</b>|<b>ping</b>|<b>checktimeout</b><i>N</i>
</p><p>Type of check to perform. Negotiate sends a request and matches a receive string. Connect only attemts to make a <small>TCP/IP</small> connection, thus the
request and receive strings may be omitted. If checktype is a number then negotiate and connect is combined so that after each N connect attempts one negotiate
attempt is performed. This is useful to check often if a service answers and in much longer intervalls a negotiating check is done. Ping means that
<small>ICMP</small> ping will be used to test the availability of real servers. Ping is also used as the connect check for <small>UDP</small> services. Off
means no checking will take place and no real or fallback servers will be activated. On means no checking will take place and real servers will always be
activated. Default is <i>negotiate</i>.


</p><p><b><big>service</big> = dns</b>|<b>ftp</b>|<b>http</b>|<b>https</b>|<b>imap</b>|<b>imaps</b>|<b>ldap</b>|<b>mysql</b>|<b>nntp</b>|<b>none</b>|<b>oracle</b>|<b>pgsql</b>|<b>pop</b>|<b>pops</b>|<b>radius</b>|<b>simpletcp</b>|<b>sip</b>|<b>smtp</b>
</p><p>The type of service to monitor when using checktype=negotiate. None denotes a service that will not be monitored.
</p><p>simpletcp sends the <b>request</b> string to the server and tests it against the <b>receive</b> regexp. The other types of checks connect to the server
using the specified protocol. Please see the <b>request</b> and <b>receive</b> sections for protocol specific information.
</p><p>Default:
</p><dl compact=\"compact\">
<dt>* Virtual server port is 21: ftp
</dt><dt>* Virtual server port is 25: smtp
</dt><dt>* Virtual server port is 53: dns
</dt><dt>* Virtual server port is 80: http
</dt><dt>* Virtual server port is 110: pop
</dt><dt>* Virtual server port is 119: nntp
</dt><dt>* Virtual server port is 143: imap
</dt><dt>* Virtual server port is 389: ldap
</dt><dt>* Virtual server port is 443: https
</dt><dt>* Virtual server port is 993: imaps
</dt><dt>* Virtual server port is 995: pops
</dt><dt>* Virtual server port is 1521: oracle
</dt><dt>* Virtual server port is 1812: radius
</dt><dt>* Virtual server port is 3306: mysql
</dt><dt>* Virtual server port is 5432: pgsql
</dt><dt>* Virtual server port is 5060: sip
</dt><dt>* Otherwise: none


</dt><dt><b><big>check command</big> = \"</b><i>path to script</i><b>\"</b>
<p>This setting is used if checktype is external and is the command to be run to check the status of a real server. It should exit with status 0 if everything
is ok, or non-zero otherwise.
</p><p>Four parameters are passed to the script:
</p></dt><dt>* virtual server ip/firewall mark
</dt><dt>* virtual server port
</dt><dt>* real server ip
</dt><dt>* real server port
</dt><dt>Default: /bin/true


<p><b><big>check port</big> =</b> <i>n</i>
</p><p>Number of port to monitor. Sometimes check port differs from service port.
</p><p>Default: port specified for each real server


</p><p><b><big>request</big> = \"</b><i>uri to requested object</i><b>\"</b>
</p><p>This object will be requested each checkinterval seconds on each real server. The string must be inside quotes. Note that this string may be overridden by
an optional per real-server based request-string.
</p><p>For a <small>DNS</small> check this should the name of an A record, or the address of a <small>PTR</small> record to look up.
</p><p>For a MySQL, Oracle or PostgeSQL check, this should be an <small>SQL</small> query. The data returned is not checked, only that the answer is one or more
rows. This is a required setting.
</p><p>For a simpletcp check, this string is sent verbatim except any occurances of \n are replaced with a new line character.


</p><p><b><big>receive</big> = \"</b><i>regexp to compare</i><b>\"</b>
</p><p>If the requested result contains this <i>regexp to compare</i>, the real server is declared alive. The regexp must be inside quotes. Keep in mind that
regexps are not plain strings and that you need to escape the special characters if they should as literals. Note that this regexp may be overridden by an
optional per real-server based receive regexp.
</p><p>For a <small>DNS</small> check this should be any one the A record's addresses or any one of the <small>PTR</small> record's names.
</p><p>For a MySQL check, the receive setting is not used.


</p><p><b><big>http method</big> = <small>GET</small></b> | <b><small>HEAD</small></b>
</p><p>Sets the <small>HTTP</small> method which should be used to fetch the <small>URI</small> specified in the request-string. <small>GET</small> is the
method used by default if the parameter is not set. If <small>HEAD</small> is used, the receive-string should be unset.
</p><p>Default: <small>GET</small>


</p><p><b><big>virtual host</big> = \"</b><i>hostname</i><b>\"</b>
</p><p>Used when using a negotiate check with <small>HTTP</small> or <small>HTTPS</small> . Sets the host header used in the <small>HTTP</small> request. In the
case of <small>HTTPS</small> this generally needs to match the common name of the <small>SSL</small> certificate. If not set then the host header will be
derived from the request url for the real server if present. As a last resort the <small>IP</small> address of the real server will be used.


</p><p><b><big>login</big> = \"</b><i>username</i><b>\"</b>
</p><p>For <small>FTP</small> , <small>IMAP</small> , <small>LDAP</small> , MySQL, Oracle, <small>POP</small> and PostgreSQL, the username used to log in.
</p><p>For Radius the passwd is used for the attribute User-Name.
</p><p>For <small>SIP</small> , the username is used as both the to and from address for an <small>OPTIONS</small> query.
</p><p>Default:
</p></dt><dt>* <small>FTP:</small> Anonymous
</dt><dt>* MySQL Oracle, and PostgreSQL: Must be specified in the configuration
</dt><dt>* <small>SIP:</small> ldirectord\@&lt;hostname&gt;, hostname is derived as per the passwd option below.
</dt><dt>* Otherwise: empty string, which denotes that case authentication will not be attempted.


</dt><dt><b><big>password</big> = \"</b><i>password</i><b>\"</b>
<p>Password to use to login to <small>FTP</small> , <small>IMAP</small> , <small>LDAP</small> , MySQL, Oracle, <small>POP</small> , PostgreSQL and
<small>SIP</small> servers.
</p><p>For Radius the passwd is used for the attribute User-Password.
</p><p>Default:
</p></dt><dt>* <small>FTP:</small> ldirectord\@&lt;hostname&gt;, where hostname is the environment variable <small>HOSTNAME</small> evaluated at run time, or sourced
from uname if unset.
</dt><dt>* Otherwise: empty string. In the case of <small>LDAP</small> , MySQL, Oracle, and PostgreSQL this means that authentication will not be performed.


</dt><dt><b><big>database name</big> = \"</b><i>databasename</i><b>\"</b>
<p>Database to use for MySQL, Oracle and PostgreSQL servers, this is the database that the query (set by <b>receive</b> above) will be performed against. This
is a required setting.


</p><p><b><big>radius secret</big> = \"</b><i>radiussecret</i><b>\"</b>
</p><p>Secret to use for Radius servers, this is the secret used to perform an Access-Request with the username (set by <b>login</b> above) and passwd (set by
<b>passwd</b> above).
</p><p>Default: empty string


</p><p><b><big>persistent</big> =</b> <i>n</i>
</p><p>Number of seconds for persistent client connections.


</p><p><b><big>netmask</big> =</b> <i>w.x.y.z</i>
</p><p>Netmask to be used for granularity of persistent client connections.


</p><p><b><big>scheduler</big> =</b> <i>scheduler_name</i>
</p><p>Scheduler to be used by <small>LVS</small> for loadbalancing. For an information on the available sehedulers please see the <b><a href=\"ipvsadm\">ipvsadm</a></b>(8) man page.
</p><p>Default: \"wrr\"


</p><p><b><big>protocol</big> = tcp</b>|<b>udp</b>|<b>fwm</b>
</p><p>Protocol to be used. If the virtual is specified as an <small>IP</small> address and port then it must be one of tcp or udp. If a firewall mark then the
protocol must be fwm.
</p><p>Default:
</p></dt><dt>* Virtual is an <small>IP</small> address and port, and the port is not 53: tcp
</dt><dt>* Virtual is an <small>IP</small> address and port, and the port is 53: udp
</dt><dt>* Virtual is a firewall mark: fwm
</dt></dl>


</p><p><b><big>check timeout</big> =</b> <i>n</i>
</p><p>Timeout in seconds for connect, external and ping checks. If the timeout is exceeded then the real server is declared dead.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>If undefined then the value of negotiatetimeout is used. negotiatetimeout is also a global value that may be overriden by a per-virtual setting.
</p><p>If both checktimeout and negotiatetimeout are unset, the default is used.
</p><p>Default: 5 seconds

</p><p><b><big>negotiate timeout</big> =</b> <i>n</i>
</p><p>Timeout in seconds for negotiate checks.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>If undefined then the value of connecttimeout is used. connecttimeout is also a global value that may be overriden by a per-virtual setting.
</p><p>If both negotiatetimeout and connecttimeout are unset, the default is used.
</p><p>Default: 30 seconds

</p><p><b><big>failure count</big> =</b> <i>n</i>
</p><p>The number of consecutive times a failure will have to be reported by a check before the realserver is considered to have failed.  A value of 1 will have the realserver considered failed on the first failure.  A successful check will reset the failure counter to 0.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: 1

</p><p><b><big>email alert</big> = \"</b><i>emailaddress</i><b>\"</b>
</p><p>A valid email address for sending alerts about the changed connection status to any real server defined in the virtual service. This option requires perl
module MailTools to be installed. Automatically tries to send email using any of the built-in methods. See perldoc Mail::Mailer for more info on methods.
</p><p>If defined in a virtual server section then the global value is overridden.

</p><p><b><big>email alert freq</big> =</b> <i>n</i>
</p><p>Delay in seconds between repeating email alerts while any given real server in the virtual service remains inaccessible. A setting of zero seconds will
inhibit the repeating alerts. The email timing accuracy of this setting is dependent on the number of seconds defined in the checkinterval configuration
option.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: 0

</p><p><b><big>email alert status</big> = all</b>|<b>none</b>|<b>starting</b>|<b>running</b>|<b>stopping</b>|<b>reloading</b>,...
</p><p>Comma delimited list of server states in which email alerts should be sent. <b>all</b> is a short-hand for
\"<b>starting</b>,<b>running</b>,<b>stopping</b>,<b>reloading</b>\". If <b>none</b> is specified, no other option may be specified, otherwise options are ored
with each other.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: all

</p><p><b><big>fallback</big> =</b> <i>ip_address|hostname[:portnumber|sercvicename]</i> [<b>gate</b>|<b>masq</b>|<b>ipip</b>]
</p><p>the server onto which a webservice is redirected if all real servers are down. Typically this would be 127.0.0.1 with an emergency page.
</p><p>If defined in a virtual server section then the global value is overridden.

</p><p><b><big>quiescent</big> = yes</b>|<b>no</b>
</p><p>If <i>yes</i>, then when real or failback servers are determined to be down, they are not actually removed from the kernel's <small>LVS</small> table.
Rather, their weight is set to zero which means that no new connections will be accepted.
</p><p>This has the side effect, that if the real server has persistent connections, new connections from any existing clients will continue to be routed to the
real server, until the persistant timeout can expire. See ipvsadm for more information on persistant connections.
</p><p>This side-effect can be avoided by running the following:
</p><p>echo 1 &gt; /proc/sys/net/ipv4/vs/expire_quiescent_template
</p><p>If the proc file isn't present this probably means that the kernel doesn't have lvs support, <small>LVS</small> support isn't loaded, or the kernel is too
old to have the proc file. Running ipvsadm as root should load <small>LVS</small> into the kernel if it is possible.
</p><p>If <i>no</i>, then the real or failback servers will be removed from the kernel's <small>LVS</small> table. The default is <i>yes</i>.
</p><p>If defined in a virtual server section then the global value is overridden.
</p><p>Default: <i>yes</i>



"),


];

/* EOF */
}
