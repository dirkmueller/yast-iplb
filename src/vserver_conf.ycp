/**
 */

{

textdomain "iplb";

import "Popup";
import "Sequencer";
import "Report";
import "Label";
import "Wizard";
import "Service";
import "Iplb";
import "IP";

include "iplb/helps.ycp";
include "iplb/common.ycp";

// ids of widgets of vserver dialog
// virtual servers & real servers are not inlucded here
list<symbol> vserver_entries = [
	`checktype,
	`service,
	`checkcommand,
	`checkport,
	`request,
	`receive,
	`httpmethod,
	`virtualhost,
	`login,
	`passwd,
	`database,
	`secret,
	`scheduler,
	`persistent,
	`netmask,
	`protocol,
	// overwrite global value part
	`checktimeout,
	`negotiatetimeout,
	`failurecount,
	`emailalert,
	`emailalertfreq,
	`emailalertstatus,
	`fallback,
	`quiescent
];

list checktypes = [
	"",
	"negotiate",
	"connect",
	"external",
	"off",
	"on",
	"ping"
];

list services = [
	"",
	"dns",
	"ftp",
	"http",
	"https",
	"imap",
	"imaps",
	"ldap",
	"mysql",
	"nntp",
	"none",
	"oracle",
	"pgsql",
	"pop",
	"pops",
	"radius",
	"sim"
];

list httpmethods = [
	"",
	"GET",
	"HEAD"
];

list schedulers = [
	"",
	"wrr",
	"rr",
	"lc",
	"wlc",
	"lblc",
	"lblcr",
	"dh",
	"sh",
	"sed",
	"nq"
];

list protocols = [
	"",
	"tcp",
	"udp",
	"fwm"
];

list emailalertstatus = [
	"",
	"all",
	"none",
	"starting",
	"running",
	"stopping",
	"reloading"
];


term vserver_list_layout()
{
	return
	`VBox(`opt(`hvstretch),
		`DumbTab(
			[
				`item(`id(`global_tab), "&Global Configuration"),
			    `item(`id(`vserver_tab), "&Virtual Server Configuration", true)
		    ],
			`VBox(`opt(`hvstretch),
				`SelectionBox( `id(`vserver_box), _("Virtual Servers")),
				`Left(`HBox(
					`PushButton(`id(`vserver_add),  _("Add")),
					`PushButton(`id(`vserver_edit), _("Edit")),
					`PushButton(`id(`vserver_del), _("Delete"))
				))
			)
		)
	);
}


any vserver_list_dialog()
{
	symbol ret = nil;
	my_SetContents("vserver_conf", vserver_list_layout());

	while(true) {
		// fill the vserver list box
		// FIXME: set the cursor position
		list<term> items = [];
		foreach(string key, any val, (map<string, any>)Iplb::vserver_conf, {
			if (Iplb::vserver_conf[key]:nil == nil) continue;
			items = add(items, `item(key));
		});
		UI::ChangeWidget(`vserver_box, `Items, items);

		// disable the delete & edit button if vserver box is empty
		integer n = size(items);
		UI::ChangeWidget(`vserver_del, `Enabled, (n!=0));
		UI::ChangeWidget(`vserver_edit, `Enabled, (n!=0));

		ret = (symbol)UI::UserInput();
		y2debug("___iplbdebug___ input=%1", ret);

		if (ret == `help) {
			myHelp("vserver_conf");
			continue;
		}

		if (ret == `vserver_del) {
			string vserver_name = (string)UI::QueryWidget(`vserver_box, `CurrentItem);
			Iplb::vserver_conf[vserver_name] = nil;
			continue;
		}

		if (contains([`ok, `cancel, `global_tab, `vserver_add, `vserver_edit], ret))
			break;

		y2error("unknown input %1", ret);
	}
	return ret;
}

term vserver_layout(map l_vserver_conf)
{
	return
	`VBox(
		`TextEntry(`id(`vserver), "Virtual Server", ""),
		`HBox(
			`SelectionBox(`id(`rserver_box), "Real Servers"),
			`Bottom(`VBox(
				`PushButton(`id(`rserver_add), "Add"),
				`PushButton(`id(`rserver_del), "Delete"),
				`PushButton(`id(`rserver_edit), "Edit")
			)
		)),
		`HBox(
			`ComboBox(`id(`checktype), `opt(`editable), "Check Type", checktypes),
			`ComboBox(`id(`service), "Service", services),
			`TextEntry(`id(`checkcommand), "Check Command", ""),
			`TextEntry(`id(`checkport), "Check Port", "")
		),
		`HBox(
			`TextEntry(`id(`request), "Request", ""),
			`TextEntry(`id(`receive), "Receive", ""),
			`ComboBox(`id(`httpmethod), "Http Method", httpmethods),
			`TextEntry(`id(`virtualhost), "Virtual Host", "")
		),
		`HBox(
			`TextEntry(`id(`login), "Login", ""),
			`TextEntry(`id(`passwd), "Password", ""),
			`TextEntry(`id(`database), "Database Name", ""),
			`TextEntry(`id(`secret), "Radius Secret", "")
		),
		`HBox(
			`TextEntry(`id(`persistent), "Persistent", ""),
			`TextEntry(`id(`netmask), "Netmask", ""),
			`ComboBox(`id(`scheduler), "Scheduler", schedulers),
			`ComboBox(`id(`protocol), "Protocol", protocols)
		),
		`HBox(
			`TextEntry(`id(`checktimeout), "Check Timeout", ""),
			`TextEntry(`id(`negotiatetimeout), "Negotiate Timeout", ""),
			`TextEntry(`id(`failurecount), "Failure Count", ""),
			`TextEntry(`id(`emailalert), "Email Alert", "")
		),
		`HBox(
			`TextEntry(`id(`emailalertfreq), "Email Alert Freq", ""),
			`ComboBox(`id(`emailalertstatus), "Email Alert Status", emailalertstatus),
			`TextEntry(`id(`fallback), "Fallback", ""),
			`ComboBox(`id(`quiescent), "Quiescent", yesno)
		),
		`VStretch()
	);
}


// return `cacel or a string
any text_input_dialog(string title, string value)
{
	any ret = nil;

	UI::OpenDialog(
		`MarginBox(1, 1, `VBox(
			`MinWidth(100, `TextEntry(`id(`text), title, value)),
			`VSpacing(1),
			`Right(`HBox(
				`PushButton(`id(`ok), _("OK")),
				`PushButton(`id(`cancel), _("Cancel"))
			))
		))
	);

    ret = UI::UserInput();
	if (ret == `ok) ret = UI::QueryWidget(`text, `Value);
	UI::CloseDialog();
	return ret;
}

// fill the widgets accord to the @l_vserver_conf
void fill_vserver_entries(map l_vserver_conf)
{
	foreach(symbol key, vserver_entries, {
		string name = substring(tostring(key), 1); // remove '`' char
		list val = l_vserver_conf[name]:[];
		if (size(val) > 0)
			UI::ChangeWidget(key, `Value, val[0]:"");
	});
}


// retrieve the value from widgets, save to @l_vserver_conf
map retrieve_vserver_entries(map l_vserver_conf)
{
	foreach(symbol key, vserver_entries, {
		string name = substring(tostring(key), 1); // remove '`' char
		list val_old = l_vserver_conf[name]:[];
		string val_new = (string)UI::QueryWidget(key, `Value);
		if (size(val_new) > 0)
			l_vserver_conf[name] = [val_new];
		else if (size(val_old) > 0)
			// assigning nil to remove it from conf file
			l_vserver_conf[name] = nil;
	});
	return l_vserver_conf;
}

any real_ip_input_dialog(string title,string value)
 {
   any ret=nil;
   //split the real server ip value;
   y2milestone("%1",value);
   string ip="";
   string fwd_method="";
   integer weight=1;
   integer pos=0;
   list<string> real_ip=splitstring(value," \t");
   ip=real_ip[0]:"";
   fwd_method=real_ip[1]:"";
   if(real_ip[2]:""!="")
     weight=tointeger(real_ip[2]:"1");

   term layout=`VBox(
		     `VBox(
                           `Label("If using IPv6,the format should like this\n[fe80::5054:ff:fe00:2]"),
			   `InputField(`id(`ip),`opt(`hstretch),_("Real Server's IP Address"),"")
			   ),
                     `VSpacing(1),
		     `HBox(
			   `ComboBox(`id(`fwd_method),_("Forward Method"),["gate","ipip","masq"]),
			   `IntField(`id(`weight),_("weight"),0,65535,1)
			   ),
		     `VSpacing(1),
		     `Right(`HBox(
			   `PushButton(`id(`ok),_("OK")),
			   `PushButton(`id(`cancel),_("Cancel"))
				  ))
		     );
   UI::OpenDialog(layout);
   UI::ChangeWidget(`ip,`Value,ip);
   UI::ChangeWidget(`fwd_method,`Value,fwd_method);
   UI::ChangeWidget(`weight,`Value,weight);
   while(true){
     ret = UI::UserInput();
     if(ret == `ok ){
       string ip=(string)UI::QueryWidget(`id(`ip),`Value);
       integer pos=0;
       //get ipv6 and ipv4 address
       //check IP Address for real server;
       if(find(ip,"[")==0){//means ip has [
	 //find next ]
	 pos=find(ip,"]");
	 if(pos!=nil)
	   ip=substring(ip,1,pos-1);
       }else
       {
	 pos=find(ip,":");
	 if(pos!=nil)
	   ip=substring(ip,0,pos);
       }

       y2milestone("ip is %1",ip);
       if(IP::Check(ip)==false){
	 Popup::Message("IP address is not Valid");
	 continue;
       }
       // if(IP::Check6((string)UI::QueryWidget(`id(`ip),`Value))==true)
       //	 ret="["+(string)UI::QueryWidget(`id(`ip),`Value)+"]";
       // else
       //	 ret=(string)UI::QueryWidget(`id(`ip),`Value);
       ret=(string)UI::QueryWidget(`id(`ip),`Value);
       // if((integer)UI::QueryWidget(`port,`Value)!=0)
       //	 ret=":"+(integer)UI::QueryWidget(`port,`Value);
       if(UI::QueryWidget(`fwd_method,`Value)!=nil)
	 ret=(string)ret+" "+(string)UI::QueryWidget(`fwd_method,`Value);
       if(UI::QueryWidget(`weight,`Value)!=1)
	 ret=(string)ret+" "+(integer)UI::QueryWidget(`weight,`Value);
       break;
	 }
     if(ret == `cancel)
       break;
   }
   UI::CloseDialog();
   return ret;
 }


// return `ok or `cancel
any vserver_dialog(string vserver_name)
{
	any ret = nil;
	map l_vserver_conf = Iplb::vserver_conf[vserver_name]:$[];
	y2milestone("___iplbdebug___ v=%2, l_v_c=%1", l_vserver_conf, vserver_name);

	my_SetContents("vserver_conf", vserver_layout(l_vserver_conf));
	fill_vserver_entries(l_vserver_conf);
	UI::ChangeWidget(`vserver, `Value, vserver_name);

	while(true) {
		// calculate the cursor position
		integer n = size(l_vserver_conf["real"]:[]);
		integer cursor = (integer)UI::QueryWidget(`rserver_box, `CurrentItem);
		if (cursor == nil) cursor = 0;
		if (cursor >= n) cursor = n - 1;

		// fill the rserver box, set the cursor position
		// make the index of real list as the id of element of the rserver selectbox
		integer i = 0;
		list<term> rs_box = [];
		foreach (string value, l_vserver_conf["real"]:[], {
			rs_box = add(rs_box, `item(`id(i), value));
			i = i + 1;
		});
		UI::ChangeWidget(`rserver_box, `Items, rs_box);
		UI::ChangeWidget(`rserver_box, `CurrentItem, cursor);

		// disable the delete & edit button if rservers box is empty
		UI::ChangeWidget(`rserver_del, `Enabled, (n!=0));
		UI::ChangeWidget(`rserver_edit, `Enabled, (n!=0));

		ret = UI::UserInput();
		y2debug("___iplbdebug___ input=%1", ret);

		if (ret == `rserver_add) {
		  ret = real_ip_input_dialog("Add a new real server:","");
		  if (ret != `cancel){
		    y2milestone("%1",(string)ret);
		    l_vserver_conf["real"] = add(l_vserver_conf["real"]:[], ret);
		  }
			continue;
		}

		if (ret == `rserver_edit) {
			integer current = (integer)UI::QueryWidget(`rserver_box, `CurrentItem);
			ret = real_ip_input_dialog("Edit the real server:",
						l_vserver_conf["real", current]:"");
			if (ret != `cancel) l_vserver_conf["real", current] = ret;
			continue;
		}

		if (ret == `rserver_del) {
			integer current = (integer)UI::QueryWidget(`rserver_box, `CurrentItem);
			l_vserver_conf["real"] = remove(l_vserver_conf["real"]:[], current);
			continue;
		}

		if (ret == `ok) {
			l_vserver_conf = retrieve_vserver_entries(l_vserver_conf);
			Iplb::vserver_conf[vserver_name] = nil;
			vserver_name = (string)UI::QueryWidget(`vserver, `Value);
			Iplb::vserver_conf[vserver_name] = l_vserver_conf;
			break;
		}

		if (ret == `cancel) break;

		y2debug("___iplbdebug___ unknown input %1", ret);
	}

	return ret;
}


any vserver_add_dialog()
{
	any ret = nil;
	ret =  vserver_dialog("");
	return ret;
}


any vserver_edit_dialog()
{
	any ret = nil;
	string vserver_name = (string) UI::QueryWidget(`id(`vserver_box), `CurrentItem);
	ret = vserver_dialog(vserver_name);

	return ret;
}


/* EOF */
}
