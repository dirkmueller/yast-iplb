{
textdomain "iplb";
import "Label";
import "Wizard";
import "Iplb";

include "iplb/helps.ycp";
include "iplb/common.ycp";


// ids of widget of global dialog
list<symbol> global_entries = [
	`checkinterval,
	`checktimeout,
	`failurecount,
	`negotiatetimeout,
	`fallback,
	`logfile,
	`emailalert,
	`emailalertfreq,
	`emailalertstatus,
	`callback,
	`execute,
	`autoreload,
	`quiescent,
	`fork,
	`supervised
];

list yesno = [
	"",
	"yes",
	"no"
];

term global_layout()
{
	return
	`VBox(
		`DumbTab(
			[
				`item(`id(`global_tab), "&Global Configuration", true),
			    `item(`id(`vserver_tab), "&Virtual Server Configuration")
		    ],
			`VBox(
				`VSpacing(1),
				`HBox(
					`TextEntry(`id(`checkinterval), _("Check Interval"), ""),
					`TextEntry(`id(`checktimeout), _("Check Timeout"), ""),
					`TextEntry(`id(`failurecount), _("Failure Count"), ""),
					`TextEntry(`id(`negotiatetimeout), _("Negotiate Timeout"), "")
				),
				`VSpacing(0.3),
				`TextEntry(`id(`fallback), _("Fallback"), ""),
				`TextEntry(`id(`logfile), _("Log File"), ""),
				`VSpacing(),
				`HBox(
					`TextEntry(`id(`emailalert), _("Email Alert"), ""),
					`TextEntry(`id(`emailalertfreq), _("Email Alert Freq"), ""),
					`TextEntry(`id(`emailalertstatus), _("Email Alert Status"), "")
				),
				`VSpacing(),
				`HBox(
					`TextEntry(`id(`callback), _("Callback"), ""),
					`TextEntry(`id(`execute), _("Execute"), "")
				),
				`VSpacing(),
				`HBox(
					`HSpacing(0.7),
					`ComboBox(`id(`autoreload), _("Auto Reload"), yesno),
					`ComboBox(`id(`quiescent), _("Quiescent"), yesno),
					`ComboBox(`id(`fork), _("Fork"), yesno),
					`ComboBox(`id(`supervised), _("Supervised"), yesno),
					`HStretch()
				),
				`VStretch()
			)
		)
	);
}


// fill the widgets accord to the Iplb::global_conf
void fill_global_entries()
{
	map l_global_conf = Iplb::global_conf;

	foreach(symbol key, global_entries, {
		string name = substring(tostring(key), 1); // remove '`' char
		string val = l_global_conf[name]:"";
		if (size(val) > 0)
			UI::ChangeWidget(key, `Value, val);
	});
}


// retrieve the value from widgets, save to Iplb::global_conf
void retrieve_global_entries()
{
	map l_global_conf = Iplb::global_conf;

	foreach(symbol key, global_entries, {
		string name = substring(tostring(key), 1); // remove '`' char
		string val_old = l_global_conf[name]:"";
		string val_new = (string)UI::QueryWidget(key, `Value);
		if (size(val_new) > 0)
			l_global_conf[name] = val_new;
		else if (size(val_old) > 0)
			// assigning nil to remove it from conf file
			l_global_conf[name] = nil;
	});

	Iplb::global_conf = (map<string, string>)l_global_conf;
}


// the entry to golbal configure stuff
// return `ok, `cancel or `vserver_tab
any global_dialog()
{
	any ret = nil;

	my_SetContents("global_conf", global_layout());
	fill_global_entries();

	while(true) {
		ret = UI::UserInput();

		if (ret == `help) myHelp("global_conf");

		if (ret == `cancel && ReallyAbort()) break;

		if (ret == `ok || ret == `vserver_tab) break;
	}

	retrieve_global_entries();
	return ret;
}

// EOF
}
